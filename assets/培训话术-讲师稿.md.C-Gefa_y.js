import{_ as a,c as n,o as p,ae as i}from"./chunks/framework.UJbk18kQ.js";const g=JSON.parse('{"title":"Claude Code 现场培训话术（讲师稿）","description":"","frontmatter":{"layout":"doc","sidebar":false},"headers":[],"relativePath":"培训话术-讲师稿.md","filePath":"培训话术-讲师稿.md"}'),l={name:"培训话术-讲师稿.md"};function e(t,s,o,h,r,c){return p(),n("div",null,[...s[0]||(s[0]=[i(`<h1 id="claude-code-现场培训话术-讲师稿" tabindex="-1">Claude Code 现场培训话术（讲师稿） <a class="header-anchor" href="#claude-code-现场培训话术-讲师稿" aria-label="Permalink to &quot;Claude Code 现场培训话术（讲师稿）&quot;">​</a></h1><blockquote><p>时长：30分钟 | 互动：2次 | 适用：有 AI 使用经验的同事</p></blockquote><p><strong>使用说明</strong>：</p><ul><li>【】内是动作提示或备注，不要念出来</li><li>斜体是语气或停顿提示</li><li>加粗是重点，可以适当放慢语速</li></ul><hr><h2 id="开场白-2分钟" tabindex="-1">开场白（2分钟） <a class="header-anchor" href="#开场白-2分钟" aria-label="Permalink to &quot;开场白（2分钟）&quot;">​</a></h2><p>【走到投影前，眼神扫视一下大家】</p><p>大家好！今天咱们花 30 分钟时间，聊一聊怎么更高效地用 Claude Code。</p><p>我先问大家一个问题：<em>（停顿 1 秒）</em> 有没有同事用 AI 写代码的时候，遇到过这种情况？</p><p>【举手示意】</p><p>让 AI 写个功能，结果改来改去十几次，最后发现还不如自己手写快？</p><p>是吧，我相信很多人都遇到过。<em>（点头，环视）</em></p><p>其实啊，这不是 AI 的问题，而是<strong>方法不对</strong>。</p><p>今天我要分享的，就是一个经过验证的方法，叫<strong>三段式工作流</strong>。用了这个方法之后，效果立竿见影：</p><ul><li><strong>返工次数减少 70%</strong></li><li><strong>Token 成本省一半</strong></li><li><strong>代码质量心里有数</strong></li></ul><p>【点击切换到大纲页】</p><p>咱们今天的内容分成四个部分，是吧：</p><ol><li>为什么要用三段式工作流（5 分钟）</li><li>核心语法和技巧（8 分钟）</li><li>实战演练（10 分钟）</li><li>快速避坑（5 分钟）</li></ol><p>最后还有 2 分钟答疑。</p><p>好，咱们开始！</p><hr><h2 id="第一部分-为什么要用三段式工作流-5分钟" tabindex="-1">第一部分：为什么要用三段式工作流（5分钟） <a class="header-anchor" href="#第一部分-为什么要用三段式工作流-5分钟" aria-label="Permalink to &quot;第一部分：为什么要用三段式工作流（5分钟）&quot;">​</a></h2><p>【切换到案例页】</p><h3 id="先给大家讲个故事" tabindex="-1">先给大家讲个故事 <a class="header-anchor" href="#先给大家讲个故事" aria-label="Permalink to &quot;先给大家讲个故事&quot;">​</a></h3><p>有个程序员小张，他呢是后端开发。<em>（可以根据实际情况调整）</em></p><p>上个月他接到个需求：给订单系统加个会员折扣功能。</p><p>小张当时刚开始用 AI 写代码，是吧，就跟咱们很多人一样，新手嘛，很激动。他直接就对着 AI 说：</p><p>【切换到对话示例页，或者口述】</p><blockquote><p>&quot;帮我写一个订单功能，要支持会员折扣&quot;</p></blockquote><p>AI 刷刷刷，<em>（做打字手势）</em> 就给他生成了 500 行代码。</p><p>小张一看，哎呀，不对啊，还要支持免费次数呢！</p><p>于是又说：</p><blockquote><p>&quot;还要支持免费次数，优先扣免费次数&quot;</p></blockquote><p>AI 又给他重新生成了 500 行代码。</p><p>小张又发现：哎呀，会员价和原价一样的时候，不应该显示会员标识啊！</p><p><strong>大家猜猜，小张最后怎么样了？</strong></p><p>【停顿 2 秒，等待回应，如果有人回答就互动一下】</p><p>他改了 12 次，花了整整一天。<em>（摇头）</em> Token 用了一大堆，钱啊！代码质量还不咋地。</p><p>最关键的是，他不知道 AI 生成的代码到底对不对。</p><p>这就是<strong>传统方式的问题</strong>：</p><p>【切换到问题总结页，指着屏幕】</p><ul><li>💸 浪费钱 —— token 消耗大</li><li>🔄 反复返工 —— 改来改去</li><li>😰 心里没底 —— 代码质量不可控</li><li>⏰ 效率反而低了</li></ul><hr><h3 id="后来小张学会了什么" tabindex="-1">后来小张学会了什么？ <a class="header-anchor" href="#后来小张学会了什么" aria-label="Permalink to &quot;后来小张学会了什么？&quot;">​</a></h3><p>【切换到对比页】</p><p>后来啊，小张学会了一个方法，就是咱们今天要讲的<strong>三段式工作流</strong>。</p><p>下次又来需求了，还是订单功能，他这么做的：</p><p><strong>第一步：先分析</strong> —— 注意啊，不着急写代码！</p><p>他对 AI 说：</p><blockquote><p>&quot;咱们先聊聊这个需求，<strong>不要写代码</strong>哈。我要加个会员折扣，你帮我分析一下，这里面有哪些计费场景？&quot;</p></blockquote><p>AI 回复说：</p><blockquote><p>&quot;明白了！我看到这里有 4 种计费场景：免费功能、付费功能优先扣免费次数、无免费次数会员按会员价、非会员按原价&quot;</p></blockquote><p>小张一看：<strong>对！这才是我要的！</strong></p><p><strong>第二步：讨论方案</strong> —— 还是不写代码！</p><blockquote><p>&quot;你说得对！那你给我 2-3 个实现方案，咱们对比一下，看哪个更好。记着，还是不要写代码。&quot;</p></blockquote><p>AI 给了三个方案，分析了优缺点。小张一看，方案 A 最合适。</p><p><strong>第三步：开始干活</strong></p><blockquote><p>&quot;好，就用方案 A！现在可以开始写代码了。&quot;</p></blockquote><p>AI 按照之前确认好的方案，一次性就给了满足需求的代码。</p><p><strong>结果呢？</strong></p><p>【切换到对比数据页，指着表格】</p><ul><li>只用了 <strong>5 轮对话</strong>（以前是 12 轮）</li><li><strong>一次到位</strong>，不用返工</li><li>Token <strong>省了一半多</strong></li><li>代码质量可控，心里有底</li></ul><p>小张美滋滋的，<em>（笑）</em> 下班还能准点回家。</p><hr><h3 id="三段式工作流是什么" tabindex="-1">三段式工作流是什么 <a class="header-anchor" href="#三段式工作流是什么" aria-label="Permalink to &quot;三段式工作流是什么&quot;">​</a></h3><p>【切换到流程图页】</p><p>咱们把它总结一下，看看这个方法到底是啥：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>第一段：分析</span></span>
<span class="line"><span>  ├─ 目标：先把事情搞明白</span></span>
<span class="line"><span>  ├─ 关键词：&quot;解释一下&quot;、&quot;分析一下&quot;</span></span>
<span class="line"><span>  └─ 重点：一定要加&quot;不要写代码&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第二段：设计</span></span>
<span class="line"><span>  ├─ 目标：讨论方案，选最优解</span></span>
<span class="line"><span>  ├─ 关键词：&quot;给我几个方案&quot;、&quot;对比一下&quot;</span></span>
<span class="line"><span>  └─ 重点：还是要说&quot;不要写代码&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>第三段：实施</span></span>
<span class="line"><span>  ├─ 目标：开始干活，写代码</span></span>
<span class="line"><span>  ├─ 关键词：&quot;开始编码&quot;、&quot;采用方案 X&quot;</span></span>
<span class="line"><span>  └─ 重点：现在可以写代码了</span></span></code></pre></div><p><strong>三个核心原则，大家记住了：</strong></p><p>【竖起三根手指，逐个指】</p><ol><li><strong>先分析，再设计，后实施</strong> —— 千万别上来就要求写代码</li><li><strong>关键时刻说&quot;不要写代码&quot;</strong> —— 分析和设计阶段必须加这句话</li><li><strong>用 @ 精确引用文件</strong> —— 别说&quot;那个文件 100 行左右&quot;，要说 <code>@service/order.go#L100-120</code></li></ol><p>好，第一部分就到这里。大家对三段式工作流的理念有了解了吧？</p><p><em>（停顿 1-2 秒，观察反应）</em></p><hr><h2 id="第二部分-核心语法和技巧-8分钟" tabindex="-1">第二部分：核心语法和技巧（8分钟） <a class="header-anchor" href="#第二部分-核心语法和技巧-8分钟" aria-label="Permalink to &quot;第二部分：核心语法和技巧（8分钟）&quot;">​</a></h2><p>【切换到语法总结页】</p><p>好，原理咱们懂了。现在教大家具体怎么操作。</p><p>核心就是<strong>四个语法 + 一个工作流</strong>。</p><h3 id="语法-1-文件引用符" tabindex="-1">语法 1：@ 文件引用符 <a class="header-anchor" href="#语法-1-文件引用符" aria-label="Permalink to &quot;语法 1：@ 文件引用符&quot;">​</a></h3><p>【指着屏幕上的示例】</p><p>这个符号啊，就像给 AI 指路一样。</p><p>来，咱们看两个对比：</p><p><strong>错误示例</strong>：</p><blockquote><p>&quot;订单文件的第 100 行左右那个函数，改一下&quot;</p></blockquote><p>你猜 AI 会怎么想：<em>（停顿）</em></p><ul><li>哪个订单文件？可能有好几个呢</li><li>100 行左右？是 98 还是 102？</li><li>哪个函数？</li></ul><p>AI 懵了，你也懵了。<em>（摊手）</em></p><p><strong>正确示例</strong>：</p><blockquote><p><code>@service/order.go#L100-120</code> 解释一下这个函数</p></blockquote><p>这下清楚了吧！就像你用手指着代码说：&quot;就是这里！&quot;</p><p><strong>格式很简单，记住三个：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@文件路径              # 引用整个文件</span></span>
<span class="line"><span>@文件路径#L50          # 引用第 50 行</span></span>
<span class="line"><span>@文件路径#L50-80       # 引用第 50 到 80 行</span></span></code></pre></div><hr><h3 id="语法-2-四个黄金修饰符" tabindex="-1">语法 2：四个黄金修饰符 <a class="header-anchor" href="#语法-2-四个黄金修饰符" aria-label="Permalink to &quot;语法 2：四个黄金修饰符&quot;">​</a></h3><p>【切换到修饰符页】</p><p>这四个词啊，就像魔法咒语一样，特别管用。</p><h4 id="_1-不要写代码" tabindex="-1">1. &quot;不要写代码&quot; <a class="header-anchor" href="#_1-不要写代码" aria-label="Permalink to &quot;1. &quot;不要写代码&quot;&quot;">​</a></h4><p><strong>用途</strong>：让 AI 只动嘴不动手，先分析讨论</p><p><strong>什么时候用</strong>：分析阶段、设计阶段</p><p>大家记住了，这句话<strong>非常重要</strong>！<em>（加重语气）</em> 不加这句话，AI 就会开始写代码，那你的 token 哗哗就没了。</p><h4 id="_2-先说明" tabindex="-1">2. &quot;先说明&quot; <a class="header-anchor" href="#_2-先说明" aria-label="Permalink to &quot;2. &quot;先说明&quot;&quot;">​</a></h4><p><strong>用途</strong>：让 AI 先告诉你打算怎么干，你确认了再干</p><p><strong>什么时候用</strong>：复杂修改、风险高的操作</p><p>就像装修房子，师傅得先告诉你怎么改，你点头了他再动手，是吧？</p><h4 id="_3-直接修改" tabindex="-1">3. &quot;直接修改&quot; <a class="header-anchor" href="#_3-直接修改" aria-label="Permalink to &quot;3. &quot;直接修改&quot;&quot;">​</a></h4><p><strong>用途</strong>：简单操作，跳过讨论，直接干</p><p><strong>什么时候用</strong>：改个变量名、加个注释这种小事</p><p>但是注意啊，只有<strong>非常简单、你心里 100% 有数</strong>的时候才用这个。拿不准就别用。</p><h4 id="_4-think-hard" tabindex="-1">4. &quot;think hard&quot; <a class="header-anchor" href="#_4-think-hard" aria-label="Permalink to &quot;4. &quot;think hard&quot;&quot;">​</a></h4><p><strong>用途</strong>：启动 AI 的深度思考模式</p><p><strong>什么时候用</strong>：复杂架构设计、技术选型、难题分析</p><p>就像请诸葛亮出谋划策，<em>（笑）</em> 但你不会为了买个菜请诸葛亮，是吧？</p><p>简单的增删改查，不需要用这个。</p><hr><h3 id="语法-3-命令符" tabindex="-1">语法 3：/ 命令符 <a class="header-anchor" href="#语法-3-命令符" aria-label="Permalink to &quot;语法 3：/ 命令符&quot;">​</a></h3><p>【快速带过】</p><p>这个就两个命令，简单：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/clear    # 清空上下文，重新开始</span></span>
<span class="line"><span>/init     # 初始化项目</span></span></code></pre></div><p><strong>什么时候用 /clear？</strong></p><ul><li>聊了 50 轮了，AI 开始糊涂了</li><li>切换到完全不同的任务</li></ul><p><strong>什么时候用 /init？</strong></p><ul><li>第一次在这个项目里用 Claude Code</li><li>项目结构大改了</li></ul><hr><h3 id="语法-4-结构化描述" tabindex="-1">语法 4：结构化描述 <a class="header-anchor" href="#语法-4-结构化描述" aria-label="Permalink to &quot;语法 4：结构化描述&quot;">​</a></h3><p>【切换到示例页】</p><p>这个很重要！咱们用 <strong>【】</strong> 这个符号来组织信息。</p><p><strong>为什么要用？</strong></p><p>你要是一股脑把需求扔给 AI，AI 容易漏掉东西。用结构化描述，就像给 AI 列了个清单。</p><p><strong>例子</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>【需求背景】</span></span>
<span class="line"><span>现有功能管理页面太乱了，用户找不到东西</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【功能目标】</span></span>
<span class="line"><span>做一个统一的功能管理页面，要包括：</span></span>
<span class="line"><span>- 价格配置</span></span>
<span class="line"><span>- 免费次数设置</span></span>
<span class="line"><span>- 平台支持</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【技术要求】</span></span>
<span class="line"><span>- 响应时间要快，500ms 以内</span></span>
<span class="line"><span>- 支持批量导入</span></span>
<span class="line"><span>- 配置变更要记录日志</span></span></code></pre></div><p>这样一写，清清楚楚，AI 也不会漏掉。</p><hr><h3 id="三段式工作流实操" tabindex="-1">三段式工作流实操 <a class="header-anchor" href="#三段式工作流实操" aria-label="Permalink to &quot;三段式工作流实操&quot;">​</a></h3><p>【切换到实操模板页】</p><p>好，语法学完了，咱们来看看具体怎么用三段式。</p><p>我给大家三个模板，记住这三个，基本就够用了。</p><p><strong>第一段：分析阶段</strong></p><p>模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@{文件}#{行号} 解释一下{功能}，不要写代码</span></span></code></pre></div><p>实际例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@api/v1/order.go#L50-100</span></span>
<span class="line"><span>解释一下订单创建的完整流程，不要写代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请说明：</span></span>
<span class="line"><span>1. 输入参数和返回值</span></span>
<span class="line"><span>2. 核心步骤</span></span>
<span class="line"><span>3. 边界条件</span></span>
<span class="line"><span>4. 错误处理</span></span></code></pre></div><p><strong>第二段：设计阶段</strong></p><p>模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>讨论需求，不要写代码</span></span>
<span class="line"><span>{详细说明}</span></span>
<span class="line"><span>请给出 2-3 个方案，不要写代码</span></span></code></pre></div><p><strong>第三段：实施阶段</strong></p><p>模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>采用方案 X，开始编码</span></span>
<span class="line"><span>每完成一层暂停，等我确认</span></span></code></pre></div><p>这三个模板，建议大家截图保存，或者记在笔记里。<em>（指着屏幕）</em></p><p>好，第二部分就到这里。</p><hr><h2 id="【互动环节-1】-3分钟" tabindex="-1">【互动环节 1】（3分钟） <a class="header-anchor" href="#【互动环节-1】-3分钟" aria-label="Permalink to &quot;【互动环节 1】（3分钟）&quot;">​</a></h2><p>【停顿，放松语气】</p><p>好，咱们休息一下。我出个小题目，大家一起练练手。</p><p><strong>场景</strong>：假设你有个文件 <code>service/user.go</code>，第 50-100 行是用户注册函数。现在产品要加手机号验证。</p><p><strong>问题</strong>：你会怎么跟 AI 说？用三段式的第一步，也就是分析阶段。</p><p>大家可以想一想，或者谁愿意说说看？</p><p>【等待 10-15 秒，如果有人回答就互动，没有就继续】</p><p>好，我来说说标准答案：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@service/user.go#L50-100</span></span>
<span class="line"><span>解释一下用户注册函数的完整流程，不要写代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请说明：</span></span>
<span class="line"><span>1. 当前的验证逻辑</span></span>
<span class="line"><span>2. 数据存储方式</span></span>
<span class="line"><span>3. 错误处理</span></span></code></pre></div><p>看到了吧，核心就是三点：</p><ol><li>用 @ 精确引用</li><li>加&quot;不要写代码&quot;</li><li>用结构化描述</li></ol><p>好，咱们继续。</p><hr><h2 id="第三部分-实战演练-10分钟" tabindex="-1">第三部分：实战演练（10分钟） <a class="header-anchor" href="#第三部分-实战演练-10分钟" aria-label="Permalink to &quot;第三部分：实战演练（10分钟）&quot;">​</a></h2><p>【切换到实战页】</p><p>刚才咱们讲了原理和语法，现在来看两个真实场景，手把手教大家怎么做。</p><h3 id="场景-1-简单逻辑增加-5分钟" tabindex="-1">场景 1：简单逻辑增加（5分钟） <a class="header-anchor" href="#场景-1-简单逻辑增加-5分钟" aria-label="Permalink to &quot;场景 1：简单逻辑增加（5分钟）&quot;">​</a></h3><p>【切换到场景 1 页】</p><p><strong>需求</strong>：产品经理来了，说&quot;用户信息接口里，如果用户是会员，额外返回会员等级和过期时间。&quot;</p><p><strong>当前代码</strong>：<em>（指着屏幕上的代码）</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUserByID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userID)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c, err)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;user_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user.ID,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user.Username,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: user.Email,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>咱们怎么做？</strong></p><h4 id="第-1-轮-理解-设计" tabindex="-1">第 1 轮：理解 + 设计 <a class="header-anchor" href="#第-1-轮-理解-设计" aria-label="Permalink to &quot;第 1 轮：理解 + 设计&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@api/v1/user.go#L50-80</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【当前功能】</span></span>
<span class="line"><span>获取用户基本信息接口</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【需要增加】</span></span>
<span class="line"><span>如果用户是会员，额外返回：</span></span>
<span class="line"><span>- member_level: 会员等级</span></span>
<span class="line"><span>- member_expire_at: 会员过期时间</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【要求】</span></span>
<span class="line"><span>- 非会员用户不返回这些字段</span></span>
<span class="line"><span>- 用 omitempty 保持向后兼容</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请先：</span></span>
<span class="line"><span>1. 复述一下当前函数的逻辑</span></span>
<span class="line"><span>2. 说说你的修改建议</span></span>
<span class="line"><span></span></span>
<span class="line"><span>不要写代码</span></span></code></pre></div><p>AI 回复后，你确认理解正确。</p><h4 id="第-2-轮-实施" tabindex="-1">第 2 轮：实施 <a class="header-anchor" href="#第-2-轮-实施" aria-label="Permalink to &quot;第 2 轮：实施&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>方案合理，开始修改</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要求：</span></span>
<span class="line"><span>- 新增字段用 json:&quot;,omitempty&quot; 标签</span></span>
<span class="line"><span>- 加上注释说明</span></span></code></pre></div><p>AI 生成代码，一次搞定！</p><p><strong>关键要点</strong>：<em>（总结）</em></p><ul><li>先理解现状，没盲目加字段</li><li>考虑了向后兼容性</li><li>想到了非会员场景</li></ul><hr><h3 id="场景-2-bug-修复-5分钟" tabindex="-1">场景 2：Bug 修复（5分钟） <a class="header-anchor" href="#场景-2-bug-修复-5分钟" aria-label="Permalink to &quot;场景 2：Bug 修复（5分钟）&quot;">​</a></h3><p>【切换到场景 2 页】</p><p><strong>Bug 现象</strong>：用户在群里 @ 你，说&quot;我创建了一个订单，免费次数怎么少了 2 次？！&quot;</p><p>你一看数据库，确实扣了 2 次。出 Bug 了！</p><p><strong>问题代码</strong>：<em>（指着屏幕）</em></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">functionID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 查询免费次数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    usage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userID, functionID)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> usage.FreeCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 扣减免费次数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DecrementFreeCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userID, functionID)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建订单</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UserID: userID,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FunctionID: functionID,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(order)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>咱们怎么做？</strong></p><h4 id="第-1-轮-问题复现" tabindex="-1">第 1 轮：问题复现 <a class="header-anchor" href="#第-1-轮-问题复现" aria-label="Permalink to &quot;第 1 轮：问题复现&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>遇到问题了，帮我定位一下</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【问题描述】</span></span>
<span class="line"><span>用户创建订单后，免费次数被扣了 2 次</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【复现步骤】</span></span>
<span class="line"><span>1. 用户有 5 次免费次数</span></span>
<span class="line"><span>2. 创建 1 个订单</span></span>
<span class="line"><span>3. 免费次数变成 3（应该是 4）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【预期行为】</span></span>
<span class="line"><span>创建 1 个订单，免费次数扣 1 次</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【相关代码】</span></span>
<span class="line"><span>@service/order.go#L100-130</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请分析可能的原因，不要写代码</span></span></code></pre></div><h4 id="第-2-轮-根因分析" tabindex="-1">第 2 轮：根因分析 <a class="header-anchor" href="#第-2-轮-根因分析" aria-label="Permalink to &quot;第 2 轮：根因分析&quot;">​</a></h4><p>AI 分析后，你继续深入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>基于代码分析根本原因，不要写代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【分析内容】</span></span>
<span class="line"><span>1. 为什么会扣两次？</span></span>
<span class="line"><span>2. 是否有并发问题？</span></span>
<span class="line"><span>3. 是否缺少事务？</span></span></code></pre></div><p>AI 分析：可能是并发问题，两个请求同时读到了 FreeCount &gt; 0，然后都去扣减了。</p><h4 id="第-3-轮-修复方案" tabindex="-1">第 3 轮：修复方案 <a class="header-anchor" href="#第-3-轮-修复方案" aria-label="Permalink to &quot;第 3 轮：修复方案&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请给出修复方案，不要写代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【方案要求】</span></span>
<span class="line"><span>1. 解决并发问题</span></span>
<span class="line"><span>2. 保证一致性</span></span>
<span class="line"><span>3. 改动要小</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如果有多个方案，对比说明一下</span></span></code></pre></div><p>AI 给了三个方案，你选了方案 A：用数据库事务。</p><h4 id="第-4-轮-实施修复" tabindex="-1">第 4 轮：实施修复 <a class="header-anchor" href="#第-4-轮-实施修复" aria-label="Permalink to &quot;第 4 轮：实施修复&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>采用方案 A（用事务），开始修复</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要求：</span></span>
<span class="line"><span>- 订单创建和次数扣减在同一事务</span></span>
<span class="line"><span>- 加上错误回滚逻辑</span></span></code></pre></div><p>AI 生成代码，Bug 修复！</p><p><strong>关键要点</strong>：<em>（总结）</em></p><ul><li>详细描述了问题现象</li><li>分析了根本原因（并发问题）</li><li>考虑了方案对比</li><li>保证了一致性（用事务）</li></ul><hr><h2 id="【互动环节-2】-2分钟" tabindex="-1">【互动环节 2】（2分钟） <a class="header-anchor" href="#【互动环节-2】-2分钟" aria-label="Permalink to &quot;【互动环节 2】（2分钟）&quot;">​</a></h2><p>【停顿，互动】</p><p>好，咱们再出个题。</p><p><strong>场景</strong>：用户修改密码后，还能用旧密码登录。这是个 Bug。</p><p><strong>问题</strong>：你会怎么跟 AI 描述这个问题？用三段式的第一步。</p><p>大家想一想，可能的原因是什么？</p><p>【等待 10-15 秒，引导讨论】</p><p>可能的原因：</p><ul><li>是不是缓存？</li><li>是不是 token 没失效？</li><li>是不是密码更新没生效？</li></ul><p>看，分析问题的时候，要想多个可能性。</p><p>好，咱们继续最后一部分。</p><hr><h2 id="第四部分-快速避坑-5分钟" tabindex="-1">第四部分：快速避坑（5分钟） <a class="header-anchor" href="#第四部分-快速避坑-5分钟" aria-label="Permalink to &quot;第四部分：快速避坑（5分钟）&quot;">​</a></h2><p>【切换到避坑页】</p><p>最后，咱们来说说前人踩过的坑，大家别再踩了。</p><p>我给大家总结了<strong>五个最常见的错误</strong>，每个都是真实案例。</p><h3 id="错误-1-没理解就修改" tabindex="-1">错误 1：没理解就修改 <a class="header-anchor" href="#错误-1-没理解就修改" aria-label="Permalink to &quot;错误 1：没理解就修改&quot;">​</a></h3><p>【案例】</p><p>小李接到任务，要在订单函数里加会员判断。他直接说：</p><p>❌ 错误做法：</p><blockquote><p>&quot;@service/order.go#L50-150 帮我在这里加个会员判断逻辑&quot;</p></blockquote><p>结果 AI 不知道加哪儿，变量有没有初始化，加进去代码直接报错。</p><p>✅ 正确做法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@service/order.go#L50-150</span></span>
<span class="line"><span>请先解释一下当前函数的完整逻辑，不要写代码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>（AI 解释后）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>理解正确！现在在&quot;校验权限&quot;之后插入会员判断逻辑</span></span></code></pre></div><p><strong>教训</strong>：先理解，再动手！</p><hr><h3 id="错误-2-描述不清晰" tabindex="-1">错误 2：描述不清晰 <a class="header-anchor" href="#错误-2-描述不清晰" aria-label="Permalink to &quot;错误 2：描述不清晰&quot;">​</a></h3><p>❌ 错误：</p><blockquote><p>&quot;订单文件的第 100 行左右那个函数，改一下&quot;</p></blockquote><p>✅ 正确：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@service/order.go#L100-120</span></span>
<span class="line"><span></span></span>
<span class="line"><span>将 OrderType 字段改为 FunctionKey，要求：</span></span>
<span class="line"><span>- 更新所有引用</span></span>
<span class="line"><span>- 保持向后兼容</span></span></code></pre></div><p><strong>教训</strong>：说话要具体！用 @ 精确引用！</p><hr><h3 id="错误-3-忽略并发安全" tabindex="-1">错误 3：忽略并发安全 <a class="header-anchor" href="#错误-3-忽略并发安全" aria-label="Permalink to &quot;错误 3：忽略并发安全&quot;">​</a></h3><p>❌ 错误：</p><blockquote><p>&quot;帮我实现扣减免费次数的逻辑&quot;</p></blockquote><p>AI 给了代码，但没考虑并发。结果两个请求同时进来，扣了两次。</p><p>✅ 正确：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>实现扣减免费次数的逻辑</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【并发要求】</span></span>
<span class="line"><span>- 需要并发安全（同一用户可能同时创建多个订单）</span></span>
<span class="line"><span>- 用数据库事务或乐观锁</span></span>
<span class="line"><span>- 扣减失败要有明确提示</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请先说明并发处理方案，不要写代码</span></span></code></pre></div><p><strong>教训</strong>：想到并发场景，一定要明确说出来！</p><hr><h3 id="错误-4-破坏兼容性" tabindex="-1">错误 4：破坏兼容性 <a class="header-anchor" href="#错误-4-破坏兼容性" aria-label="Permalink to &quot;错误 4：破坏兼容性&quot;">​</a></h3><p>❌ 错误：</p><blockquote><p>&quot;删除 user 表的 nickname 字段&quot;</p></blockquote><p>结果线上老版本 App 全崩了，因为还在用这个字段。</p><p>✅ 正确：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@model/user.go</span></span>
<span class="line"><span></span></span>
<span class="line"><span>删除 nickname 字段前，请先：</span></span>
<span class="line"><span>1. 搜索所有引用这个字段的地方</span></span>
<span class="line"><span>2. 评估影响范围</span></span>
<span class="line"><span>3. 给出兼容性迁移方案</span></span>
<span class="line"><span></span></span>
<span class="line"><span>不要写代码</span></span></code></pre></div><p><strong>教训</strong>：删东西之前，先看看哪些地方在用！</p><hr><h3 id="错误-5-上下文混乱" tabindex="-1">错误 5：上下文混乱 <a class="header-anchor" href="#错误-5-上下文混乱" aria-label="Permalink to &quot;错误 5：上下文混乱&quot;">​</a></h3><p><strong>问题</strong>：聊了 50 轮了，AI 开始混淆之前的任务。</p><p><strong>解决</strong>：切换任务时记得 <code>/clear</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/clear</span></span>
<span class="line"><span></span></span>
<span class="line"><span>继续订单模块开发</span></span>
<span class="line"><span></span></span>
<span class="line"><span>【上次进度】</span></span>
<span class="line"><span>- 已完成：Model 层、Service 层</span></span>
<span class="line"><span>- 当前：需要完成 API 层</span></span>
<span class="line"><span>- 关键决策：采用方案 B</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请先复述一下关键决策，然后咱们继续</span></span></code></pre></div><p><strong>教训</strong>：对话长了或切换任务，记得清空上下文！</p><hr><h3 id="快速检查清单" tabindex="-1">快速检查清单 <a class="header-anchor" href="#快速检查清单" aria-label="Permalink to &quot;快速检查清单&quot;">​</a></h3><p>【指着屏幕上的清单】</p><p>最后，给大家一个清单。发送提示词之前，快速检查一下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>□ 用 @ 精确引用文件了吗？</span></span>
<span class="line"><span>□ 分析和设计阶段加&quot;不要写代码&quot;了吗？</span></span>
<span class="line"><span>□ 需求描述清楚了吗？</span></span>
<span class="line"><span>□ 考虑并发安全了吗？</span></span>
<span class="line"><span>□ 考虑向后兼容了吗？</span></span>
<span class="line"><span>□ 用【】组织信息了吗？</span></span>
<span class="line"><span>□ 复杂修改先说明方案了吗？</span></span></code></pre></div><p>这几个都打勾了，再发送！</p><hr><h2 id="总结和答疑-2分钟" tabindex="-1">总结和答疑（2分钟） <a class="header-anchor" href="#总结和答疑-2分钟" aria-label="Permalink to &quot;总结和答疑（2分钟）&quot;">​</a></h2><p>【切换到总结页】</p><p>好，咱们今天的分享就到这里。</p><p><strong>最后总结三个关键点：</strong></p><p>【竖起三根手指】</p><ol><li><strong>三段式工作流</strong> —— 先分析，再设计，后实施</li><li><strong>精确引用</strong> —— 用 @ 指定文件和行号</li><li><strong>不要写代码</strong> —— 分析和设计阶段一定要加这句话</li></ol><p><strong>最重要的是</strong>：马上去实践！<em>（加重语气）</em></p><p>从明天开始，找个小任务，用三段式走一遍。我相信，一周后你会回来感谢我：</p><p><em>（笑）</em> &quot;天啊，效率真的提升了！下班时间提前了 1 小时！&quot;</p><p>【停顿】</p><p>好，还有 2 分钟，大家有什么问题吗？</p><p>【等待提问，如果没有就补充】</p><p>如果暂时没有问题，会后我会把文档发到群里，大家可以随时查阅。</p><p><strong>加油，各位！咱们一起提升效率，准点下班！</strong></p><p>【鼓掌，结束】</p><hr><h2 id="附-常见问题应对话术" tabindex="-1">附：常见问题应对话术 <a class="header-anchor" href="#附-常见问题应对话术" aria-label="Permalink to &quot;附：常见问题应对话术&quot;">​</a></h2><h3 id="q-每次都要走完三个阶段吗" tabindex="-1">Q：每次都要走完三个阶段吗？ <a class="header-anchor" href="#q-每次都要走完三个阶段吗" aria-label="Permalink to &quot;Q：每次都要走完三个阶段吗？&quot;">​</a></h3><p><strong>A</strong>：不一定！看复杂度，是吧。</p><ul><li><strong>简单任务</strong>：分析 + 实施（2 轮）—— 比如加个字段</li><li><strong>中等任务</strong>：完整三段式（3-5 轮）—— 比如加个会员判断</li><li><strong>复杂任务</strong>：完整三段式 + 多轮讨论（6-10 轮）—— 比如重构计费系统</li></ul><p>灵活点，别死板！</p><h3 id="q-ai-理解错了怎么办" tabindex="-1">Q：AI 理解错了怎么办？ <a class="header-anchor" href="#q-ai-理解错了怎么办" aria-label="Permalink to &quot;Q：AI 理解错了怎么办？&quot;">​</a></h3><p><strong>A</strong>：用纠错模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>不对，{错误在哪里}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>正确理解应该是：</span></span>
<span class="line"><span>{详细说明}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请先复述正确的理解，然后重新{操作}</span></span></code></pre></div><p>例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>不对，我不是要删除这个字段，是要改名</span></span>
<span class="line"><span></span></span>
<span class="line"><span>正确理解应该是：</span></span>
<span class="line"><span>把 UserID 改名为 UID，但要保持向后兼容</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请先复述正确的理解，然后重新给出方案</span></span></code></pre></div><h3 id="q-什么时候该用-think-hard" tabindex="-1">Q：什么时候该用&quot;think hard&quot;？ <a class="header-anchor" href="#q-什么时候该用-think-hard" aria-label="Permalink to &quot;Q：什么时候该用&quot;think hard&quot;？&quot;">​</a></h3><p><strong>A</strong>：复杂架构设计、技术选型的时候。</p><p>简单的增删改查，不需要。就像你不会为了买个菜请诸葛亮，是吧？<em>（笑）</em></p><hr><p><strong>【培训结束】</strong></p>`,295)])])}const k=a(l,[["render",e]]);export{g as __pageData,k as default};
